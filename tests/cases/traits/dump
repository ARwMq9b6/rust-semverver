<eddyb> you need a fulfillment context that you put in all the bounds of the new item
 (and assuming you used the translated old bounds as the ParamEnv)
 (or rather, translated tcx.param_env(old_def_id))
 you should be able to call the resolve_or_error or whatever it is thing
 once you do that, impls are pretty easy

<twk> it seems I'll find most of what I need from browsing ParamEnv and friends

<eddyb> rustc::traits::fulfill that's the important part

<twk> okay, I'll report back once there's something which doesn't fall over all the time

<eddyb> so for impls: for every old impl, e.g. impl Trait for X, check that X: Trait still holds,
 after translating (both X and Trait) to the new
 it's the same fulfillment context thing as making sure the bounds are satisfied

given param_env: ParamEnv { caller_bounds: Slice([Binder(TraitPredicate(<Self as old::Abc>))]), reveal: UserFacing }
predicates: [Binder(TraitPredicate(<Self as old::Abc>))]
obligations: []

given param_env: ParamEnv { caller_bounds: Slice([Binder(TraitPredicate(<<Self as old::Abc>::A as std::marker::Sized>)), Binder(TraitPredicate(<Self as old::Abc>))]), reveal: UserFacing }
predicates: [Binder(TraitPredicate(<Self as old::Abc>)), Binder(TraitPredicate(<_#0t as std::marker::Sized>))]
obligations: [Obligation(predicate=Binder(TraitPredicate(<Self as old::Abc>)),depth=0)]
